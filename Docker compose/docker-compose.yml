version: '3.4'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    hostname: "zookeeper"
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    hostname: "kafka"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.168.0.26:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  acquisitiongateway:
    image: ${DOCKER_REGISTRY-}acquisitiongateway
    build:
      context: RoadConditionMonitoring/Microservices/AcquisitionGateway
      dockerfile: AcquisitionGateway/Dockerfile
    ports: 
      - "49158:80"
    hostname: "acquisitiongateway"
  python-sensor-temp-1:
    build: "Docker images/python-sensor-temp/python-sensor-temp-1"
    ports:
      - "5001:5000"
  python-sensor-air-1:
    build: "Docker images/python-sensor-air"
    ports:
      - "5011:5000"
  python-sensor-combined-1:
    build: "Docker images/python-sensor-combined"
    ports:
      - "5031:5000"
  python-sensor-combined-2:
    build: "Docker images/python-sensor-combined"
    ports:
      - "5032:5000"
  python-sensor-vehicle:
    build: "Docker images/python-sensor-vehicle"
  temperaturemicroservice:
    image: ${DOCKER_REGISTRY-}temperaturemicroservice
    build:
      context: RoadConditionMonitoring/Microservices/TemperatureMicroservice
      dockerfile: TemperatureMicroservice/Dockerfile
    ports: 
      - "49161:80"
    hostname: "temperaturemicroservice"
  cassandra2:
    image: cassandra
    ports:
      - "9043:9042"
    hostname: "cassandra2"
  airqualitymicroservice:
    image: ${DOCKER_REGISTRY-}airqualitymicroservice
    build:
      context: RoadConditionMonitoring/Microservices/AirQualityMicroservice
      dockerfile: AirQualityMicroservice/Dockerfile
    ports: 
      - "49162:80"
    hostname: "airqualitymicroservice"
  vehiclegateway:
    image: ${DOCKER_REGISTRY-}vehiclegateway
    build:
      context: RoadConditionMonitoring/Microservices/VehicleGateway
      dockerfile: VehicleGateway/Dockerfile
    hostname: "vehiclegateway"
  vehiclelocationmicroservice:
    image: ${DOCKER_REGISTRY-}vehiclelocationmicroservice
    build:
      context: RoadConditionMonitoring/Microservices/VehicleLocationMicroservice
      dockerfile: VehicleLocationMicroservice/Dockerfile
    hostname: "vehiclelocationmicroservice"
    ports:
      - "49160:80"
  trafficmicroservice:
    image: ${DOCKER_REGISTRY-}trafficmicroservice
    build:
      context: RoadConditionMonitoring/Microservices/TrafficMicroservice
      dockerfile: TrafficMicroservice/Dockerfile
    hostname: "trafficmicroservice"
    ports:
      - "49155:80"
  cassandra1:
    image: cassandra
    ports:
      - "9046:9042"
    hostname: "cassandra1"
  monitoringgateway:
    image: ${DOCKER_REGISTRY-}monitoringgateway
    build:
      context: RoadConditionMonitoring/Microservices/MonitoringGateway
      dockerfile: MonitoringGateway/Dockerfile
    hostname: "monitoringgateway"
    ports:
      - "49164:80"
  vehiclemonitoringgateway:
    image: ${DOCKER_REGISTRY-}vehiclemonitoringgateway
    build:
      context: RoadConditionMonitoring/Microservices/VehicleMonitoringGateway
      dockerfile: VehicleMonitoringGateway/Dockerfile
    hostname: "vehiclemonitoringgateway"
    ports:
      - "49166:80"